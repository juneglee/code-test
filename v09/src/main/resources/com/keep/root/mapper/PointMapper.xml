<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  
   <mapper  namespace="com.keep.root.dao.PointDao">
   
    <resultMap type="Point" id="PointMap">
	    <id column="point_no"   property="no"/>
	    <result column="user_no"   property="userNo"/>
	    <result column="trader_no"   property="traderNo"/>
	    <result column="point_type"   property="pointType"/>
	    <result column="content"   property="content"/>
	    <result column="price"   property="price"/>
	    
	    <association property="user" javaType="User">
      <id column="user_no"   property="no"/>
      <result column="user_name"  property="name"/>
      <result column="phone_number"  property="tel"/>
      <result column="account"  property="account"/>
      <result column="bank"  property="bank"/>
      </association>
      
    </resultMap>
   
   <insert id="insert" parameterType="Point"
   useGeneratedKeys="true" keyColumn="point_no" keyProperty="no">
     insert into points
       user_no, trader_no, point_type, content, price
     values(#{user.no}, #{user.no}, #{pointType}, #{content}, #{price})
     
     <!-- 
    insert into points (user_no, trader_no, point_type, content,  price )
       values( 4, 2, 2, 2, 20000);
     where user_no != trader_no
      -->
   </insert>
   
   <select id="findAll" resultMap="PointMap" parameterType="map">
     select 
      p.point_no, p.user_no, p.trader_no, p.point_type, p.content, p.price
     from
      points p
     where
      point_no
      and p.user_no != p.trader_no
      <!-- 
      and
      <if test="p.user_no != p.trader_no">
       p.user_no like #{p.user_no}
       and p.trader_no like #{p.trader_no}
      </if>
      p.trader_no!=p.user_no and  
      -->
   </select>
   
   <select id="findOutputByUserNo" resultMap="PointMap" parameterType="int">
     select 
      p.user_no,
      p.trader_no,
      u.user_name, 
      u.phone_number,
      u.account,
      u.bank
      from
      points p 
      inner join users u on (p.user_no=u.user_no) 
      where
      u.user_no=#{userNo}
      and p.user_no != p.trader_no
      <!-- 
      
     from
      points p , users u 
     where
      u.user_no=#{no}
      (p.user_no=u.user_no and p.trader_no!=u.user_no) 
  - inner 조인을 하지 않았을 경우, 해당 번호에 대한 값이 실행되지 않았음.
  - 즉, 해당 번호가 반복되었음. 
      
     select 
      p.user_no,
      p.trader_no,
      u.user_no,
      u.user_no
     from
      points p
      inner join users u on 
      (p.user_no=u.user_no) 
     where 
      p.point_no=1;
       -->
   </select>
   
   <select id="find" resultMap="PointMap" parameterType="map">
     select 
      p.point_no,
      p.trader_no,
      p.user_no,
      p.point_type,
      p.content
     from
      points p
     where
      p.point_no=#{no}
   </select>
   
   <!--  
     where 
      p.point_no=#{no}
    -->
   
   <select id="findByUserNo" resultMap="PointMap" parameterType="map">
     select 
      p.point_no,
      p.user_no,
      p.trader_no,
      u.user_name, 
      u.phone_number,
      u.account,
      u.bank
     from
      points p
      inner join users u on p.user_no=u.user_no 
     where 
      p.user_no=#{no}
   </select>
   
   <select id="findBytraderNo" resultMap="PointMap" parameterType="int">
     select
       p.trader_no 
     from
      points p
      inner join users u on p.trader_no=u.user_no
     where 
      p.point_no=#{no}
   </select>
   
   <!-- 
   select distinct user_no from points
union 
select distinct user_no from users;
    -->
   
   <update id="update" parameterType="Point">
     update points p set
      p.price=#{price}
     where point_no=#{no}
     <!-- 
     update points p, users u set
      p.user_no=1,
      p.trader_no=2,
      p.price=3000,
      u.user_name=2222
     where u.user_no=1;
      -->
   </update>
   
   <delete id="delete" parameterType="int">
    delete from points
    where point_no=#{no}
    <!-- 
    delete from points
    where point_no=8
     -->
   </delete>
   
   </mapper>