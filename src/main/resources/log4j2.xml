<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="INFO">
<!-- 
OFF
가능한 가장 높은 순위이며 로깅을 해제
FATAL
조기 종료를 유발하는 심각한 오류. 콘솔에 즉시 표시 될 것으로 예상
ERROR
런타임 오류 또는 예기치 않은 조건. 콘솔에 즉시 표시
̶W̶A̶R̶N̶
더 이상 사용되지 않는 API 사용, ‘거의’오류에 가까운 상황.
상태 콘솔에 즉시 표시
INFO
런타임 이벤트. 콘솔에 즉시 보일 것으로 예상되므로 보수적이며 최소한으로 유지
DEBUG
시스템을 통한 흐름에 대한 자세한 정보.
로그에만 쓰여질 것으로 예상, 일반적으로 응용 프로그램에서 기록한 대부분의 줄은 DEBUG로 작성.
TRACE
가장 자세한 정보. 이것들은 로그에만 쓰여질 것으로 예상됩니다.

 -->
  <Appenders>
    <Console name="console" target="SYSTEM_OUT">
      <PatternLayout
        pattern="[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n" />
    </Console>
  </Appenders>

<!-- 
3. Appenders
- Appenders는 로그가 출력되는 위치를 나타냄
- 정의한 name은 AppenderRef 태그에서 참조를 할 때 사용
- 태그 별 출력 위치
<Console> : 콘솔
<File> : 파일
<RollingFile> : 조건에 따라 롤링(일별, 조건별 등)
<JDBC>: DB
- 아래는 Appenders 태그 안에 Console 태그를 이용하여 console이라는 이름을 갖는
 system.out의 출력을 정의하는 부분이다.
FILE, RollingFile, JDBC 등이 올 수 있다.
 --> 
  
  <Loggers>
    <Logger name="com.keep.root.dao" level="debug" additivity="false">
      <AppenderRef ref="console" />
    </Logger>
    
    <Root level="debug" additivity="false">
      <AppenderRef ref="console" />
    </Root>
  </Loggers>
  
<!-- 
6. Loggers
- 로깅 작업의 주체, 각 패키지 별, 로그 정책을 설정 할 수 있다.
- <Loggers> : 하위 요소로 <Root>, <logger> 가 존재한다.
- <Root> : 일반적인 로그 정책에 대해 정의를 할 수 있으며, 반드시 한개를 정의해야한다.
- <Logger> : 여러개 정의를 할수 있으며 name에 정의하는 패키지 범위를 설정 할 수 있다.
- <AppenderRef> : 위에 정의한 Appender 의 참조를 지정 한다. Root, Logger 태그 안에서만 사용가능
- name : 로그의 name, 로그를 정의할 패키지의 범위
- level : 로그의 Level(위에 log level 참고)
- additivity : 중복로깅여부
 -->  
 
</Configuration>